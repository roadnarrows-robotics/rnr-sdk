#!/bin/bash
#
# Script: eudoxus_openni2
#

## \file
##
## $LastChangedDate$
## $Rev$
## 
## \brief Script providing service to monitor user push button events to
## launch or kill openni2 nodes.
##
## This script is used by init.d eudoxus_shutter service.
##
## \author: Robin Knight (robin.knight@roadnarrows.com)
## 
## \par Copyright:
##   (C) 2016.  RoadNarrows LLC.
##   (http://www.roadnarrows.com)
##   All Rights Reserved

#
# @EulaBegin@
# @EulaEnd@
#

# Exported GPIO numbers.
declare -r gpio_led=18      # blue user LED output GPIO
declare -r gpio_bttn=19     # user push button input GPIO

# GPIO values.
# For the user button, the released state is 1; pushed state is 0.
# For the user LED, the LED off state is 0, the on state is 1.
declare -i old_button=1   # old push button state
declare -i button=1       # current push button state
declare -i led=0          # current led state

# Times
declare -ri billion=1000000000
declare -ai t_cur                 # current time (sec nsec)
declare -ai t_led                 # led state change time (sec nsec)
declare -ai t_hz=(0 400000000)    # led flash hertz (sec nsec)

# Some user defined state variables
declare -i action_state=0   # action state, 0 is not running, 1 is running 
declare -i action_pid=0     # action process PID

#
# Hook to determine status of user defined action.
#
# Sets action_pid and action_state appropriately.
#
action_status()
{
  action_pid=$(pgrep -f '.*roslaunch *openni2_launch *openni2.launch')
  if [ ${action_pid} -gt 0 ]
  then
    action_state=1
  else
    action_state=0
  fi
}

#
# Hook to start user defined action function.
#
action_start()
{
  echo
  echo "*** Started on $(date) ***"
  roslaunch openni2_launch openni2.launch &
  action_pid=$!
  action_state=1
  sleep 1
}

#
# Hook to stop user defined action function.
#
action_stop()
{
  echo
  echo "*** Stopped on $(date) ***"
  kill ${action_pid} >/dev/null 2>&1
  action_pid=0
  action_state=0
  sleep 1
}

#
# Mark time of LED state change.
#
led_mark()
{
  t_led=($(date "+%s 1%N"))
}

#
# Determine if LED on/off state should be transition.
#
led_flash()
{
  declare -i sec
  declare -i nsec

  t_cur=($(date "+%s 1%N"))
  flash=0

  sec=${t_cur[0]}-${t_led[0]}
  nsec=${t_cur[1]}-${t_led[1]}
  if [ ${nsec} -lt 0 ]
  then
    nsec=${billion}+${nsec}
  fi

  if [ ${sec} -ge ${t_hz[0]} ]
  then
    if [ ${nsec} -ge ${t_hz[1]} ]
    then
      flash=1
    fi
  fi

  echo ${flash}
}

#
# Set LED
#   
# If not action_state, thenthe LED should be solid on
# If action_state, then the LED should slowly blink
#
led_set()
{
  declare -i doflash

  if [ ${action_state} -eq 0 ]
  then
    if [ ${led} -eq 0 ]
    then
      led=1
      gpiowrite ${gpio_led} ${led}
      led_mark
    fi
  else
    doflash=$(led_flash)
    if [ ${doflash} -eq 1 ]
    then
      if [ ${led} -eq 0 ]
      then
        led=1
      else
        led=0
      fi
      #date "+%s.%N"
      gpiowrite ${gpio_led} ${led}
      led_mark
    fi
  fi
}

led_mark

#
# Block-wait on user push button events.
#
while :
do
  gpionotify --timeout=0.25 --monitor ${gpio_bttn} | \
  while read button
  do
    action_status
    case ${button}
    in
      0) #echo "Button is in the pushed state"
          ;;
      1) #echo "Button is in the released state"
          # pushed --> released
          if [ ${old_button} -eq 0 ]
          then
            if [ ${action_state} -eq 1 ] # currently action_state
            then
              action_stop
            else # currently not action_state
              action_start
            fi
          fi
          ;;
     -1|*)  echo "Error"
            exit 4;
          ;;
    esac
    old_button=${button}
    #echo ${old_button} ${button}
    led_set
  done
done

exit 0
