#!/bin/sh
### BEGIN INIT INFO
# Provides:       3D sensor ROS publishing nodes via user push button.
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description: 3D sensor ROS publishing nodes via user push button.
# Description:    The ROS openni2_launch script execs a set of nodes and 
#                 nodelettes to support RGBD publishing from the 3D point
#                 cloud sensor. This service attaches to the GPIO associated
#                 with a user push button to start/stop the nodes.
### END INIT INFO

if [ -f /etc/profile.d/eudoxus.sh ]
then
  . /etc/profile.d/eudoxus.sh
elif [ -f /prj/etc/profile.d/eudoxus.sh ]
then
  . /prj/etc/profile.d/eudoxus.sh
fi

export PATH="${PATH:+$PATH:}/usr/sbin:/sbin:/bin"

NAME="Eudoxus user button monitor service"
SERVICE=eudoxus_shutter
SCRIPT=eudoxus_svc_openni2
DAEMON=$(which ${SCRIPT})
PIDFILE=/var/run/${SERVICE}.pid
LOGFILE=/var/log/${SERVICE}.log

test -x "${DAEMON}" || exit 0

# standard init sh support functions
. /lib/lsb/init-functions

#
# Get daemon process id.
#
# 'Returns' pid or 0.
#
get_daemon_pid()
{
  pid=$(/usr/bin/pgrep -f "/bin/bash *-c *${DAEMON}")
  if [ "${pid}" != '' ]
  then
    echo "${pid}"
  else
    echo 0
  fi
  #echo "DBG: pid=${pid}" >>${LOGFILE}
}

#
# Get daemon process group id.
#
# get_daemon_pgid <pid>
#
# 'Returns' pgid or 0.
#
get_daemon_pgid()
{
  pgid=$(/bin/ps -o pgid= ${1})
  if [ "${pgid}" != '' ]
  then
    echo "${pgid}"
  else
    echo 0
  fi
  #echo "DBG: pgid=${pgid}" >>${LOGFILE}
}

#
# Start service
#
startdaemon()
{
  pid=$(get_daemon_pid)

  if [ "${pid}" -eq 0 ]
  then
    log_daemon_msg "Starting ${NAME}" "${SERVICE}" || true
    if start-stop-daemon --start --quiet --make-pidfile --pidfile ${PIDFILE} \
      --background --exec /bin/bash -- \
      -c "${DAEMON} >>${LOGFILE} 2>&1"
    #if start-stop-daemon -t --start --quiet --make-pidfile --pidfile ${PIDFILE} \
    #  --background --exec ${DAEMON}
    then
      log_end_msg 0 || true
    else
      log_end_msg 1 || true
    fi
  else
    log_daemon_msg "${NAME} already running" "" || true
    log_end_msg 1 || true
  fi
}

#
# Stop service
#
stopdaemon()
{
  pid=$(get_daemon_pid)

  if [ "${pid}" -ne 0 ]
  then
    log_daemon_msg "Stopping ${NAME}" "${SERVICE}" || true
    
    pgid=$(get_daemon_pgid ${pid})

    #if start-stop-daemon --stop --quiet --oknodo --pidfile ${PIDFILE}
    if [ "${pgid}" -ne 0 ]
    then
      if /bin/kill -15 -"${pgid}"
      then
        rm -f "${PIDFILE}"
        log_end_msg 0 || true
      else
        log_end_msg 1 || true
      fi
    else
      log_end_msg 1 || true
    fi
  else
    log_daemon_msg "${NAME} not running" "" || true
    log_end_msg 1 || true
  fi
}

#
# Restart service
#
restartdaemon()
{
  stopdaemon
  startdaemon
}

#
# Status (not used)
#
pidof_daemon()
{
  if [ -e "${PIDFILE}" ]
  then
    PID=$(cat ${PIDFILE})
    pidof ${DAEMON} | grep -q ${PID}
    return $?
  fi
  return 1
}

case $1 in
  start)
    startdaemon
    ;;
  stop)
    stopdaemon
    ;;
  restart)
    restartdaemon
    ;;
  reload|force-reload)
    ;;
  status)
	  #status_of_proc -p "${PIDFILE}" "${DAEMON}" "${SERVICE}" && exit 0 || exit $?
    pid=$(get_daemon_pid)
    if [ "${pid}" -ne 0 ]
    then
      log_daemon_msg "${NAME} is running" "" || true
    else
      log_daemon_msg "${NAME} is not running" "" || true
    fi
    ;;
  *)
    log_action_msg "Usage: $0 {start|stop|restart|reload|force-reload|status}" || true
    exit 1
    ;;
esac

exit 0 # good
