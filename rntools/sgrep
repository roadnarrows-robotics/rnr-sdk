#!/bin/bash
#
# File:
#   sgrep
#
# Usage:
#   sgrep [OPTION]... PATTERN [-- [GREPOPTS]]
#   sgrep --help
#
# Description:
#   Greps source files in current directory for PATTERN.
#

argv0=$(basename $0)

# callHelp
callHelp()
{
  cat <<EOH
Usage: ${argv0} [OPTION]... PATTERN [-- [GREPOPTS]]
       ${argv0} --help

Greps source files in current directory for PATTERN.

Options:
  --no-color    Disable color output. Default: colors are enabled.

  -s, --source=SRCLIST
                List of source types to search. The SRCLIST consists of
                a comma separated concatenation of canned source types
                and/or user file patterns.

                SRCLIST ::= SRCTYPE[,SRCTYPE[,...]]
                SRCTYPE ::= c | doxy | htm | html | j | java | make | md |
                            pl | perl | py | python | swig | tcl | tk | yaml |
                            USRSRC

                  C and C++ files (default)
                c ::= *.[cCh] *.cxx *.cpp *.[ch][ch] *.hpp

                  Doxygen files
                doxy ::= *.doxy

                  HTML files
                htm  ::= html
                html ::= *.htm *.html *.xml *.css *.dtd

                  Java files
                j    ::= java
                java ::= *.java'

                  Makefiles
                make ::= Makefile  makefile *.mk CMakeLists.txt *.cmake

                  Markdown Files
                md ::= *.md

                  Perl files
                pl   ::= perl
                perl ::= *.pl

                  Python files
                py     ::= python
                python ::= *.py

                  Swig files
                swig ::= *.i

                  Tcl files
                tcl ::= *.tcl

                  Tk files
                tk ::= *.tk

                  Human-readable data serialization files
                yaml ::= *.yaml *.yml *.json

                  Files matching sh(1) pattern
                USRSRC ::= SHPAT

  --help        Print this help and exit.

The ${argv0} command searches the current directory downward for PATTERN found
in any files matching the SRCLIST. If no SRCLIST is specified, the default is
all C and C++ files. The PATTERN is interpreted as an extended regular
expression.

${argv0} is aware of git, subversion, and RNMAKE hidden and auto-generated files
and directories. These are excluded from search.

Any GREPOPTS found are applied to evoking the grep command.

Examples:
  # Search current C/C++ source for 'FooBar'.
  $ sgrep FooBar

  # Search html, doxygen, and php files for beginning or ending unordered list
  # tags.
  $ sgrep --srclist='html,doxy,*.php' '<ul>\|</ul>'
          
  # Search C, C++, and python source for pattern -INF. Notice the -- to disable
  # ${argv0} option parsing. Also the -i (ignore case) option is applied to
  # grep.
  $ sgrep -s 'c,py' -- '-INF' -i
EOH
  exit 0;
}

# ansi colors
color_pre="\033["
color_post="\033[0m"
color_red="0;31m"
color_green="0;32m"
color_yellow="0;33m"
color_cyan="0;36m"
color_gray="1;30m"
color_bold_red="1;31m"

# colors used
color_info="${color_pre}${color_green}"
color_warn="${color_pre}${color_yellow}"
color_error="${color_pre}${color_red}"
color_fatal="${color_pre}${color_bold_red}"
color_banner="${color_pre}${color_cyan}"
color_end=${color_post}

# turnOffColor
turnOffColor()
{
  color_info=
  color_warn=
  color_error=
  color_fatal=
  color_banner=
  color_end=
}

# showInfo msg [msg...]
showInfo()
{
  printf "${color_info}${*}${color_end}\n"
}

# showWarning wmsg [wmsg...]
showWarning()
{
  printf "${argv0}: ${color_warn}${*}${color_end}\n" >&2
}

# showError emsg [emsg...]
showError()
{
  printf "${argv0}: ${color_error}${*}${color_end}\n" >&2
}

# fatal exitcode emsg
fatal()
{
  printf "${argv0}: ${color_fatal}${2}${color_end}\n" >&2
  exit ${1}
}

# long and short options
longopts="no-color,source:,help"
shortopts="s:"

# get the options
OPTS=$(getopt --name ${argv0} -o "${shortopts}" --long "${longopts}" -- "${@}")

if [ $? != 0 ]
then
  fatal 2 "Try '${argv0} --help' for more information."
fi

#echo "${OPTS}"
eval set -- "${OPTS}"

# command line option and argument variables
srclist=
excludes="/.git*|/.svn|/obj|/.deps|/dist|/loc"
grep_color="--color=always"

# process command-line options
while true
do
  case "$1" in
    --no-color)
        turnOffColor
        grep_color="--color=never"
        shift;;
    -s|--source) srclist="${2}"; shift 2;;
    --help) callHelp; shift;;

    --) shift; break;;
    *)  break;;
  esac
done

if [ $# -lt 1 ]
then
  showError "No PATTERN specified."
  fatal 2 "Try '${argv0} --help' for more information."
fi

pattern="${1}"
shift

#typeset srclist=${srclist}','  # lowercase & make sure loop terminates
if [ -z "${srclist}" ]
then
  srclist='c'
fi

srclist=${srclist}','  # make sure loop terminates

# build find source list
while [ "${srclist}" != "" ]
do
  srctype=${srclist%%,*}
  case "${srctype}" in
    c) 
        src="-name '*.[cCh]' -or -name '*.cxx' -or -name '*.cpp' -or -name '*.[ch][ch]' -or -name '*.hpp'"
        ;;
    doxy) 
        src="-name '*.doxy'"
        ;;
    htm|html) 
        src="-name '*.htm' -or -name '*.html' -or -name '*.xml' -or -name '*.css' -or -name '*.dtd'" 
        ;;
    j|java) 
        src="-name '*.java'"
        ;;
    make) 
        src="-name Makefile -or -name makefile -or -name '*.mk' -or -name 'CMakeLists.txt' -or -name '*.cmake'"
        ;;
    md) 
        src="-name '*.md'"
        ;;
    pl|perl) 
        src="-name '*.pl'"
        ;;
    py|python) 
        src="-name '*.py'"
        ;;
    swig) 
        src="-name '*.i'"
        ;;
    tcl) 
        src="-name '*.tcl'"
        ;;
    tk) 
        src="-name '*.tk'"
        ;;
    yaml) 
        src="-name '*.yaml' -or -name '*.yml' -or -name '*.json'"
        ;;
    *) 
        src="-name '${srctype}'"
        ;;
  esac

  findlist=${findlist:+"${findlist} -or "}${src}

  srclist=${srclist#$srctype,}
done

#echo "$findlist"

grepopts="${@} -E ${pattern}"

bold_line='::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::' 

# showBanner sgrep
showBanner()
{
	printf "\n${color_banner}${bold_line}\n"
  printf -- "${1}\n"
	printf "${bold_line}${color_end}\n\n"
}

cmd="find . \( ${findlist} \) -print \
| grep -v -E \"${excludes}\" \
| xargs grep -n ${grep_color} ${grepopts}"

showBanner "${cmd}"

eval "${cmd}"
