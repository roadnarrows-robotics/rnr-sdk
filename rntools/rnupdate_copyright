#!/usr/bin/python
#
# File:
#   rnupdate_copyright
#
# Usage:
#   rnupdate_copyright [OPTION]... [DIR | FILE]
#   rnupdate_copyright --help
#
# Description:
#   Update package source copyright dates with present year.
#
# Author:
#   Robin D. Knight (robin.knight@roadnarrows.com)
#
# Copyright:
#   (C) 2017-2018. RoadNarrows LLC.
#   http://www.roadnarrows.com
#   All Rights Reserved
#
# License:
#   MIT
#

import os
import sys
import shutil
import datetime as dt
import fnmatch
import re
import getopt

# command name
argv0 = os.path.basename(__file__)

## Minimum copyright year
YearRNCreated = 2002

## Excluded directories
Pat_excludes  = [
    '.git', '.svn', 'obj', '.deps', 'dist', 'loc', 'hw', 'gtest', 'tinyxml',
    'build', 'build.*', 'doxy', 'deb-doc', 'deb-dev', 'deb-src'
]

## Source file patterns
Pat_c_src     = ['*.[cCh]', '*.cxx', '*.cpp', '*.[ch][ch]', '*.hpp']
Pat_mk_src    = ['Makefile', 'makefile', '*.mk']
Pat_py_src    = ['*.py']
Pat_j_src     = ['*.java']
Pat_xml_src   = ['*.htm', '*.html', '*.xml']
Pat_doxy_src  = ['*.doxy']
Pat_js_src    = ['*.js']
Pat_src       = Pat_c_src + Pat_mk_src + Pat_py_src + Pat_j_src + \
                Pat_xml_src + Pat_doxy_src + Pat_js_src

## Doxygen file comment style patterns
Pat_slashstar_style = Pat_c_src + Pat_j_src + Pat_doxy_src + Pat_js_src
Pat_hash_style      = Pat_py_src
Pat_hashhash_style  = []
Pat_hashbang_style  = []
Pat_xml_style       = Pat_xml_src
Pat_sol_style       = Pat_mk_src
Pat_nocom_style     = []

## Slash-star (c, java, doxygen, php, ...) comment style constructs
ComSlashStarKey     = "/* */"
ComSlashStarStart   = "/*!"
ComSlashStarMiddle  = " * "
ComSlashStarEnd     = " */"

## Hash (makefiles, python, perl, ...) comment style constructs
ComHashKey          = "#"
ComHashStart        = "##"
ComHashMiddle       = "# "
ComHashEnd          = "#"

## Hash-hash doxygen comment style constructs
ComHashHashKey      = "##"
ComHashHashStart    = "##"
ComHashHashMiddle   = "## "
ComHashHashEnd      = "##"

## Hash-bang doxygen filtered pattern comment style constructs
ComHashBangKey      = "##!"
ComHashBangStart    = "##!"
ComHashBangMiddle   = "##! "
ComHashBangEnd      = "##!"

## XML (html, xml, ...) comment style constructs
ComXmlKey           = "<!-- -->"
ComXmlStart         = "<!--"
ComXmlMiddle        = " - "
ComXmlEnd           = " -->"

## Start-Of-Line "comment" style constructs
ComSolKey          = "^"
ComSolStart        = ""
ComSolMiddle       = ""
ComSolEnd          = ""

## No comment doxygen comment style constructs
NoComKey        = "nocomment"
NoCom           = ""

## Supported Comments 
CommentStyle = {
    ComSlashStarKey: {
      'start':  ComSlashStarStart,
      'middle': ComSlashStarMiddle,
      'end':    ComSlashStarEnd
    },
    ComHashKey: {
      'start':  ComHashStart,
      'middle': ComHashMiddle,
      'end':    ComHashEnd
    },
    ComHashHashKey: {
      'start':  ComHashHashStart,
      'middle': ComHashHashMiddle,
      'end':    ComHashHashEnd
    },
    ComHashBangKey: {
      'start':  ComHashBangStart,
      'middle': ComHashBangMiddle,
      'end':    ComHashBangEnd
    },
    ComXmlKey: {
      'start':  ComXmlStart,
      'middle': ComXmlMiddle,
      'end':    ComXmlEnd
    },
    ComSolKey: {
      'start':  ComSolStart,
      'middle': ComSolMiddle,
      'end':    ComSolEnd
    },
    NoComKey: {
      'start':  NoCom,
      'middle': NoCom,
      'end':    NoCom
    }
}

# ansi colors
color_pre         = "\033["
color_post        = "\033[0m"
color_red         = "0;31m"
color_bold_red    = "1;31m"
color_green       = "0;32m"
color_yellow      = "0;33m"
color_gray        = "1;30m"

# colors used
color_info    = color_pre + color_green
color_warn    = color_pre + color_yellow
color_error   = color_pre + color_red
color_fatal   = color_pre + color_bold_red
color_banner  = color_pre + color_green
color_end     = color_post

# disable color output
def turnOffColor():
  global color_info, color_warn, color_error, color_fatal, color_banner
  global color_end
  color_info    = ''
  color_warn    = ''
  color_error   = ''
  color_fatal   = ''
  color_banner  = ''
  color_end     = ''

# showInfo msg [msg...]
def showInfo(*msgs):
  print color_info,
  for msg in msgs:
    print msg,
  print color_end

# showWarning wmsg [wmsg...]
def showWarning(*wmsgs):
  print "{0}: {1}Warning:".format(argv0, color_warn),
  for msg in wmsgs:
    print msg,
  print color_end

# showError emsg [msg...]
def showError(*emsgs):
  print "{0}: {1}Error:".format(argv0, color_error),
  for msg in emsgs:
    print msg,
  print color_end

# fatal exitcode emsg [emsg...]
def fatal(ec, *emsgs):
  print "{0}: {1}Fatal:".format(argv0, color_fatal),
  for msg in emsgs:
    print msg,
  print color_end
  sys.exit(ec)

bold_line='::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::' 

# showBanner year isdir name doupdate forceit
def showBanner(year, isdir, name, doupdate, forceit):
  print "\n{0}{1}".format(color_banner, bold_line)
  print ":: {0:<15s} {1}".format("Current Year:", year)
  if isdir:
    print ":: {0:<15s} {1}".format("Directory:", name)
  else:
    print ":: {0:<15s} {1}".format("File:", name)
  print ":: {0:<15s} {1}".format("Update File(s):", doupdate)
  print ":: {0:<15s} {1}".format("Force Update:", forceit)
  print "{0}{1}\n".format(bold_line, color_end)


## \brief Command-line exception class.
#
# Raise usage excpetion.
#
class usage(Exception):

  ## \brief Constructor.
  #
  # \param msg   Error message string.
  #
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


## \brief Application class.
#
class Application():

  ## \brief Constructor.
  #
  def __init__(self):
    ## command pathname
    self.m_cmdname = __file__

    self.m_copyright = {}
    self.m_copyright['template'] = [
        "{0} \\copyright\n",
        "{0}   \\h_copy {1}-{2}. RoadNarrows LLC.\\n\n",
        "{0}   http://www.roadnarrows.com\\n\n",
        "{0}   All Rights Reserved\n"
    ]
    self.m_copyright['new_template'] = [
        "{0}\pkgcopyright{{{1}-{2},{3},{4}}}\n"
    ]

    ## Current year
    self.m_yearNow = dt.date.today().year

    ## Number of files (required to be) updated.
    self.m_nUpdateCnt = 0

  ## \brief Print usage error.
  #
  # \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    showError(emsg)
    fatal(2, "Try '{0} --help' for more information.".format(argv0))

  ##
  ## \brief Print command-line help.
  #
  def callHelp(self):
    print """\
Usage: {0} [OPTIONS] [DIR | FILE]
       {0} --help

Update source file copyrights with this current year.

Options and Arguments:
      --no-color          : Disable color output.
  -n, --no-update         : List files that need updating, but don't update.
  -f, --force             : Force update, even if years match. Must be good.
  -e, --exclude=EXDIR     : Exclude directory. May be iterated.

  -h, --help              : Display this help and exit.

Description:
  If a directory DIR is specified, then recursively update all source file
  copyrights with the current year, starting from directory DIR.
  Only files that have copyrights that differ in the ending year from
  current year will be updated, unless the --force option is specified.
  Source files are defined as:
    C, C++, Java, Python, make files, doxygen, html, xml

  If a regular FILE is specified, then update the file's copyright with the
  current year.

  If neither DIR nor FILE is specified, the current working directory ('.') is
  used. 
""".format(argv0)
 
  ## \brief Print file i/o warning message.
  #
  # \param f        Opened file object or file name.
  # \param warnmsgs Warning message(s).
  #
  def iowarning(self, f, *warnmsgs):
    if type(f) is file:
      showWarning("{0}:".format(f.name), *warnmsgs)
    else:
      showWarning("{0}:".format(f), *warnmsgs)

  ## \brief Print file i/o error message.
  #
  # \param f        Opened file object or file name.
  # \param errmsg   Error message(s).
  #
  def ioerror(self, f, *errmsgs):
    if type(f) is file:
      showError("{0}:".format(f.name), *errmsgs)
    else:
      showError("{0}:".format(f), *errmsgs)

  ##  
  ## \brief Get command-line options
  ##  
  ## \param argv          Argument list. If not None, then overrides
  ##                      command-line arguments.
  ## \param [out] kwargs  Keyword argument list.  
  ##
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self.m_cmdname = kwargs.get('argv0', __file__)

    # defaults
    kwargs['debug']   = 0
    kwargs['color']   = True
    kwargs['update']  = True
    kwargs['force']   = False
    kwargs['topdir']  = '.'
    kwargs['file']    = None

    # parse command-line options
    try:
      try:
        opts, args = getopt.getopt(argv[1:], "nfe:",
            ['help', 'no-color', 'no-update', 'force', 'exclude=', ''])
      except getopt.error, msg:
        raise usage(msg)
      for opt, optarg in opts:
        if opt in ('--no-color',):
          kwargs['color'] = False
          turnOffColor()
        elif opt in ('-n', '--no-update', ):
          kwargs['update'] = False
        elif opt in ('-f', '--force', ):
          kwargs['force'] = True
        elif opt in ('-e', '--exlude', ):
          Pat_excludes.append(optarg)
        elif opt in ('--help', ):
          self.callHelp()
          sys.exit(0)
    except usage, err:
      self.printUsageErr(err.msg)
      sys.exit(2)

    # update directory or file
    if len(args) > 0:
      if os.path.isdir(args[0]):
        kwargs['topdir'] = args[0]
      else:
        kwargs['file'] = args[0]

    return kwargs

  ## \brief Classify comment style from file name.
  #
  # \param fname   File name.
  #
  # \return Comment style.
  #
  def classifyFileType(self, fname):
    for pat in Pat_slashstar_style:
      if fnmatch.fnmatch(fname, pat):
        return ComSlashStarKey
    for pat in Pat_hash_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashKey
    for pat in Pat_hashhash_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashHashKey
    for pat in Pat_hashbang_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashBangKey
    for pat in Pat_xml_style:
      if fnmatch.fnmatch(fname, pat):
        return ComXmlKey
    for pat in Pat_sol_style:
      if fnmatch.fnmatch(fname, pat):
        return ComSolKey
    for pat in Pat_nocom_style:
      if fnmatch.fnmatch(fname, pat):
        return NoComKey
    return None
  
  ##
  ## \brief Add copyright of the given style to the dictionary of copyrights.
  ##
  ## \param style   Comment style
  ##
  def makeCopyrightBlock(self, style, yearBegin, yearEnd):
    self.m_copyright[style] = []
    for line in self.m_copyright['template']:
      self.m_copyright[style].append(
          line.format(CommentStyle[style]['middle'], yearBegin, yearEnd))
  
  ## \brief Add new copyright of the given style to the dictionary of
  # copyrights.
  #
  # \param style      Comment style.
  # \param info       Copyright information.
  #
  def makeNewCopyrightBlock(self, style, info):
    self.m_copyright[style] = []
    for line in self.m_copyright['new_template']:
      self.m_copyright[style].append(
          line.format(CommentStyle[style]['middle'],
            info['yearBegin'], info['yearEnd'], info['org'], info['url']))
  
  ## \brief Find copyright block in open source file.
  #
  # \param f  Open source file object.
  #
  # \return
  # Returns dictionary of found copyright information.
  #
  def findCopyright(self, f):
    # file copyright info 
    info = {
      'found':      False,    # copyright [not] found
      'lineBegin':  -1,       # copyright begin line number
      'lineYear':   -1,       # copyright year line number
      'lineEnd':    -1,       # copyright end line number
      'years':      '',       # copyright years range string
      'org':        '',       # copyright organization name string
      'url':        ''}       # copyright organization URL string

    n = 0   # working line number

    #
    # Search file for copyright block.
    #
    for line in f:
      n += 1

      if line[-1] == '\n':
        line = line[0:-1]

      #
      # New file comment block format.
      #
      # pattern: '\pkgcopyright{year[-year],...}'
      #
      match = re.search(r"\\pkgcopyright{([0-9-]+),(.*),(.*)}",
                    line, re.IGNORECASE)
      if match:
        info['found']     = True
        info['lineBegin'] = n
        info['lineYear']  = n
        info['lineEnd']   = n
        info['years']     = match.group(1)
        info['org']       = match.group(2)
        info['url']       = match.group(3)
        #print 'DBG:', f.name, ":", info
        return info

      #
      # Legacy file comment block format.
      #
      # Multi-line pattern:
      # \par Copyright
      # (C) year[year[,-year]] RoadNarrows
      # All Rights Reserved
      #

      # pattern: '\par Copyright'
      # pattern: '\copyright'
      if re.search(r"\\par\s+Copyright|\\copyright", line, re.IGNORECASE):
        info['lineBegin'] = n
        continue

      # pattern: (C) year[,-]year RoadNarrows LLC
      match = re.search(r"(\(C\)|h_copy)\s+([0-9,-]+)[.:]?\s*([^\\]*)",
                    line, re.IGNORECASE)
      if match:
        info['lineYear']  = n
        info['years']     = match.group(2)
        info['org']       = match.group(3)
        continue

      # pattern: All Rights Reserved
      if re.search(r"All Rights Reserved", line, re.IGNORECASE):
        info['lineEnd'] = n
        break

      if info['lineEnd'] == -1:
        match = re.search(r"(http[s]?:[^\\]*)", line, re.IGNORECASE)
        if match:
          info['url'] = match.group(1)

      # copyright block is too long
      elif  info['lineBegin'] > 0 and info['lineEnd'] == -1 and \
            n - info['lineBegin'] > 6:
        self.iowarning(f,
            "Copyright block starting at line {0} is bogus.".format(
                info['lineBegin']))
        return info

    #
    # final checks
    #

    # no begin pattern
    if info['lineBegin'] < 0:
      self.iowarning(f, "Copyright block is missing or non-standard.")
      return info
    # no year pattern
    elif info['lineYear'] < 0:
      self.iowarning(f, "Copyright year line is missing.")
      return info
    # no year pattern
    elif info['lineEnd'] < 0:
      self.iowarning(f, "Copyright end pattern missing or non-standard.")
      return info
    # begin pattern found but end position preceeds it
    elif info['lineEnd'] < info['lineBegin']:
      self.iowarning(f,
          "Copyright begin pattern at {0} follows end pattern at {1}.".format(
           info['lineBegin'], info['lineEnd']))
      return info
    # year not between begin and end patterns
    elif  info['lineYear'] < info['lineBegin'] or \
          info['lineYear'] > info['lineEnd']:
      self.iowarning(f, "Copyright year at {0} not between " \
                 "begin and end patterns {1}-{2}.".format(
          info['lineYear'], info['lineBegin'], info['lineEnd']))
      return info
    # good
    else:
      info['found'] = True
      #print 'DBG:', f.name, ":", info
      return info
  
  ## \brief Get the source file copyright beginning and ending years.
  ##
  ## \param f     Open source file.
  ## \param info  Copyright information.
  ##
  ## \return
  ## Returns True if copyright needs updating, false otherwise.
  ##
  def getCopyrightYears(self, f, info, doforce):
    match = re.search(r"([12]\d+)[, -]*([12]\d\d\d)?", info['years'])
    #print "DBG: {}".format(m.groups())
    if match is None:
      self.iowarning(f,
          "Copyright line specifies no valid year(s)\nLine: {0}".format(
          info['lineYears']))
      return False

    try:
      yearBegin = int(match.group(1))
    except:
      self.iowarning(f, "Copyright year {0} syntax error.".format(
        match.group(1)))
      return False

    if match.group(2) is not None:
      try:
        yearEnd = int(match.group(2))
      except:
        self.iowarning(f, "Copyright year {0} syntax error.".format(
          match.group(2)))
        return False
    else:
      yearEnd = yearBegin

    # sanity
    if yearBegin < YearRNCreated or yearBegin > self.m_yearNow:
      self.iowarning(f, "Copyright year {0} not in range [{1}, {2}].".format(
          yearBegin, YearRNCreated, self.m_yearNow))
      return False
    if yearEnd < YearRNCreated or yearEnd > self.m_yearNow:
      self.iowarning(f, "Copyright year {0} not in range [{1}, {2}].".format(
          yearEnd, YearRNCreated, self.m_yearNow))
      return False
    if yearEnd < yearBegin:
      self.iowarning(f,
          "Copyright ending year {0} < beginning year {1}.".format(
          yearEnd, yearBegin))
      return False

    info['yearBegin'] = yearBegin
    info['yearEnd']   = yearEnd

    if yearEnd < self.m_yearNow or doforce:
      info['yearEnd'] = self.m_yearNow
      return True
    else:
      return False
  
  ## \brief Copy source file to temporary while updating the EULA.
  #
  # \param fsrc   Open source file object.
  # \param style  EULA comment style.
  # \param n0     EULA begin tag line number.
  # \param n1     EULA end tag line number.
  #
  # \return On success, returns temporary file name.
  #         On failure, an empty string is returned.
  #
  def copySourceToTmp(self, fsrc, style, nLineBegin, nLineEnd):
    tmpfile = fsrc.name + '.tmp'
    try:
      fdst = open(tmpfile, "w")
    except:
      self.iowarning(tmpfile, "Cannot open temporary before updating.")
      return ""
    fsrc.seek(0)
    n = 1
    # lines before copyright
    while n < nLineBegin:
      fdst.write(fsrc.readline())
      n += 1
    # new copyright
    for line in self.m_copyright[style]:
      fdst.write(line)
    # eat old copyright
    while n <= nLineEnd:
      fsrc.readline()
      n += 1
    # lines after copyright
    for line in fsrc:
      fdst.write(line)
    fdst.close()
    return tmpfile
  
  ## \brief Check and, if needed, update source file copyright.
  #
  # \param f          Open source file object.
  # \param style      Comment style.
  # \param doupdate   Do [not] update.
  # \param doforce    Do [not] force update on good files.
  #
  def updateCopyright(self, f, style, doupdate, doforce):
    info = self.findCopyright(f)
    if not info['found']:
      return

    modify = self.getCopyrightYears(f, info, doforce)
    #print "DBG: {0}: modify={1}, years=[{2}, {3}]".format(f.name,
    #    modify, yearBegin, yearEnd)
    if not modify:
      return

    #self.makeCopyrightBlock(style, info['yearBegin'], info['yearEnd'])

    self.makeNewCopyrightBlock(style, info)

    #print "DBG: {}".format(self.m_copyright[style])

    if doupdate:
      tmpfile = self.copySourceToTmp(f, style,
                                    info['lineBegin'], info['lineEnd'])
      f.close()
      if not tmpfile:
        return
      try:
        shutil.move(tmpfile, f.name)
      except IOError:
        self.ioerror(f,
            "Cannot move temporary {0} back to source.".format(tmpfile))
        return
      print "Updated: {0}".format(f.name)
      self.m_nUpdateCnt += 1
    else:
      print "Update required: {0}".format(f.name)
      self.m_nUpdateCnt += 1
  
  ## \brief Run application on file.
  #    
  # \param kwargs  Optional keyword argument list.
  #
  def runOnFile(self, **kwargs):
    showBanner(self.m_yearNow, False, kwargs['file'],
                kwargs['update'], kwargs['force'])

    showInfo("Scanning...")

    self.m_nUpdateCnt = 0

    fname = kwargs['file']
    if not os.path.isfile(fname):
      self.ioerror(fname, "Does not exist.")
      return
    style = self.classifyFileType(fname)
    if style:
      try:
        f = open(fname, "r")
      except:
        self.ioerror(fname, "Cannot open.")
        return
      self.updateCopyright(f, style, kwargs['update'], kwargs['force'])
      if not f.closed:
        f.close()

  ## \brief Run application recursively on directory.
  #    
  # \param kwargs  Optional keyword argument list.
  #
  def runOnDirectory(self, **kwargs):
    showBanner(self.m_yearNow, True, kwargs['topdir'],
                kwargs['update'], kwargs['force'])

    self.m_nUpdateCnt = 0

    for root, dirlist, filelist in os.walk(kwargs['topdir']):
      #print "------------------------"
      #print "root: ", root
      for pat in Pat_excludes:
        for dirname in dirlist:
          if fnmatch.fnmatch(dirname, pat):
            dirlist.remove(dirname)
            break

      #print "dirlist: ", dirlist
      for fname in filelist:
        style = self.classifyFileType(fname)
        if style:
          fpath = root + os.path.sep + fname
          try:
            f = open(fpath, "r")
          except:
            print "Warning: {0}: Cannot open.".format(fpath)
            continue
          self.updateCopyright(f, style, kwargs['update'], kwargs['force'])
          if not f.closed:
            f.close()

  ## \brief Run application.
  #    
  # \param argv    Optional argument list to override command-line arguments.
  # \param kwargs  Optional keyword argument list.
  #
  def run(self, argv=None, **kwargs):
  
    kwargs = self.getOptions(argv, **kwargs)

    if kwargs['file']:
      self.runOnFile(**kwargs)
    else:
      self.runOnDirectory(**kwargs)

    showInfo("Files: {0}".format(self.m_nUpdateCnt))

    return 0
  ##


#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------

# create utility application
app = Application()

# run application
sys.exit( app.run() )
