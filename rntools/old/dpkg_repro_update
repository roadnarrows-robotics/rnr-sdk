#!/bin/bash
################################################################################
#
# Package:  RN Tools
#
# File:     dpkg_repro_update
#
# Version:
#   $LastChangedDate$
#   $Rev$
#
# Description:
#   Update repository from uploaded debian packages found in the repo's
#   incoming direcotry.
#
# Author: Robin Knight    (robin.knight@roadnarrows.com)
# Author: Daniel Packard  (daniel@roadnarrows.com)
#
# Copyright (C) 2013-2015.  RoadNarrows LLC.
#
# All Rights Reserved
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that
# (1) The above copyright notice and the following two paragraphs
# appear in all copies of the source code and (2) redistributions
# including binaries reproduces these notices in the supporting
# documentation.   Substantial modifications to this software may be
# copyrighted by their authors and need not follow the licensing terms
# described here, provided that the new terms are clearly indicated in
# all files where they apply.
#
# IN NO EVENT SHALL THE AUTHOR, ROADNARROWS LLC, OR ANY MEMBERS/EMPLOYEES
# OF ROADNARROW LLC OR DISTRIBUTORS OF THIS SOFTWARE BE LIABLE TO ANY
# PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL
# DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
# EVEN IF THE AUTHORS OR ANY OF THE ABOVE PARTIES HAVE BEEN ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
# THE AUTHOR AND ROADNARROWS LLC SPECIFICALLY DISCLAIM ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN
# "AS IS" BASIS, AND THE AUTHORS AND DISTRIBUTORS HAVE NO OBLIGATION TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
#
################################################################################

_Cmd="dpkg_repro_update"


# Debian supported RN packages
repolist="\
apt \
apt-linaro-omap \
apt-ubuntu-trusty-odroid \
apt-ubuntu-x86_64
"

# options
repo=
repo_codename=
noexec=
verbose=

#
# Synopsis:     _Usage
# Description:  Prints command usage
#
_Usage()
{
  printf "Usage: ${_Cmd} [OPTIONS]\n"
  printf "       ${_Cmd} --help\n"
}

#
# Synopsis:     _Desc
# Description:  Prints command description.
#
_Desc()
{
cat <<EOF

DESCRIPTION
  Update local repository with newly uploaded Debian packages found the
  repo's incoming/<codename> subdirectory. Since only one package of a given
  codename can exist in a repro, the older version is removed first.

  Repos:
    ${repolist}

  Distribution Codenames:
    Repo specific.

  Supported Debian Types:
    ${debtypes}

OPTIONS
  -r, --repo=<repo>         Repository. REQUIRED.
  -c, --codename=<codename> Distribution codename.
                            Default: Repository specific.
  -n, --noexec              Do not execute, only print what would have been.
  -v, --verbose             Verbose printing.

  -h, --help                Display this help and exit.
EOF
}

#
# Synopsis:     _help
# Description:  Prints help and exits.
#
_help()
{
  _Usage
  _Desc
  exit 0
}

#
# Synopsis:     _try
# Description:  Prints try encouragement.
#
_try()
{
  printf "Try '${_Cmd} --help' for more information.\n" >&2
}

#
# Synopsis:     _error [<msg1> [<msg2>...]]
# Description:  Prints error message and exits
#
_error()
{
  if [ $# -gt 0 ]
  then
    printf "${_Cmd}: Error: $1"
    shift
    while [ $# -gt 0 ]
    do
      printf ": $1" 
      shift
    done
    printf "\n"
  fi
    _try
  exit 2
}

# 
# Get command-line options and arguments.
#
export POSIXLY_CORRECT

cmdopts=$(getopt --long=repo:,codename:,noexec,verbose,help --options=r:c:nvh --name=${_Cmd} -- "$@")

if [ $? != 0 ]
then
  _try
  exit 1
fi

eval set -- "${cmdopts}"

while true
do
  case "$1" in
    -r|--repo)      repo="$2"; shift 2;;
    -c|--codename)  repo_codename="$2"; shift 2;;
    -n|--noexec)    noexec=true; shift;;
    -v|--verbose)   verbose=true; shift;;
    --help)         _help; shift;;
    --)             shift; break;;
    *)              echo "Internal error!"; exit 1;;
  esac
done

if [[ "${repo}" = "" ]]
then
  _error "Required <repo> not specified"
fi

if [[ "${repolist/${repo}}" = "${repolist}" ]]
then
  _error "${repo}" "Unsupported Debian local repository"
fi

shift $(($OPTIND - 1))

#if [[ $# -lt 1 ]]
#then
#fi

case "${repo}"
in
  apt|apt-ubuntu-x86_64)
    codenamelist="precise trusty"
    if [[ -z "${repo_codename}" ]]
    then
      repo_codename='trusty'
    fi
    repo_arch='amd64'
    ;;
  apt-linaro-omap)
    codenamelist="stable"
    if [[ -z "${repo_codename}" ]]
    then
      repo_codename='stable'
    fi
    repo_arch='armhf'
    ;;
  apt-ubuntu-trusty-odroid)
    codenamelist="trusty"
    if [[ -z "${repo_codename}" ]]
    then
      repo_codename='trusty'
    fi
    repo_arch='armhf'
    ;;
  apt-ubuntu-trusty-x86_64)
    codenamelist="trusty"
    repo_codename='trusty'
    repo_arch='amd64'
    ;;
  *)  _error "${repo}" "Unsupported repo."
      ;;
esac

if [[ "${codenamelist/${repo_codename}}" = "${codenamelist}" ]]
then
  _error "${repo_codename}" "Unsupported distribution codename"
fi

#
# Working variables
#
acct='buckleup@www.roadnarrows.com'
distro='/home/buckleup/roadnarrows.com/distro'
fqrepo=${distro}/${repo}
incoming=${fqrepo}/incoming/${repo_codename}
debtypes='dev src doc'
deb_file_list=""
let file_cnt=0
deb_pkg_file=
deb_pkg_name=
deb_pkg_ver=
deb_pkg_arch=
deb_pkg_sect=
deb_pkg_list=
passphrase=
demark='-------------------------------------------------------------------------------'

#
# Synopsis:     trim <var>
# Description:  Strips leading and trailing whitespace.
#
trim()
{
  local var="$*"
  var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace characters
  var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace characters
  echo -n "${var}"
}

#
# Synopsis:     getpassphrase
# Description:  Asks for passphrase without echo and save in passphrase.
# Output:       passphrase
#
getpassphrase()
{
  passphrase=
  echo -n "Repo passphrase: "
  read -s passphrase
  echo
}

#
#
#
# Synopsis:     get_pkg_info <deb_file>
# Description:  Retrieves critical Debian package info from .deb package file.
# Output:       deb_pkg_file deb_pkg_name deb_pkg_ver deb_pkg_arch deb_pkg_sect
#
get_pkg_info()
{
  deb_pkg_file=$1
  deb_pkg_name=
  deb_pkg_ver=
  deb_pkg_arch=
  deb_pkg_sect=

  info="$(dpkg -I ${deb_pkg_file})"
  #printf "DBG: get_pkg_info() $info\n"

  #readarray -t lines <<<"${info}"   # bash 4.0+
  OIFS=${IFS}
  IFS=$'\n' lines=(${info})           # bash 3.x
  IFS=${OIFS}
  #printf "DBG: get_pkg_info() ${#lines}\n"

  for (( i=0; i<${#lines}; i+=1 ))
  do
    #printf "DBG: get_pkg_info() line $i: ${lines[$i]}\n"
    IFS=":${IFS}" read -ra arr <<< "${lines[$i]}"
    #echo "DBG: get_pkg_info() [${arr[0]}] [${arr[1]}] ${#arr}"
    field=$(trim ${arr[0]})
    #echo "DBG: get_pkg_info() [${field}]"
    case "${field}"
    in
      [Pp]ackage)
        deb_pkg_name=$(trim ${arr[1]})
        ;;
      [Vv]ersion)
        deb_pkg_ver=$(trim ${arr[1]})
        ;;
      [Ss]ection)
        deb_pkg_sect=$(trim ${arr[1]})
        ;;
      [Pp]riority)
        ;;
      [Aa]rchitecture)
        deb_pkg_arch=$(trim ${arr[1]})
        ;;
      [Dd]epends)
        ;;
      [Mm]aintainer)    # last field of interest
        break;
        ;;
      *) ;;
    esac
  done
}

#
# Synopsis:     make_dep_list
# Description:  Makes list of Debian .deb files to update.
# Output:       deb_file_list
#
make_deb_list()
{
  deb_file_list=""
  let file_cnt=0
  files=${incoming}/*.deb
  for deb_file in ${files}
  do
    if [[ -f ${deb_file} ]]
    then
      deb_file_list="${deb_file_list} ${deb_file}"
      let file_cnt+=1
    fi
  done
}

#
# Synopsis:     remove_deb_pkgs
# Description:  Remove any existing Debian packages from repo. Required before
#               adding updated packages.
# Input:        deb_pkg_list passphrase
#
remove_deb_pkgs()
{
  local rm_list=
  #printf "DBG: remove_deb_pkgs() Candidate remove list:\n ${deb_pkg_list}\n"
  for pkg_name in ${deb_pkg_list}
  do
    pkgtest=$(reprepro list ${repo_codename} ${pkg_name})
    #printf "DBG: remove_deb_pkgs() ${pkg_name}: repo=\"${pkgtest}\"\n"
    if [[ "${pkgtest}" != "" ]]
    then
      rm_list="${rm_list} ${pkg_name}"
    fi
  done
  rm_list=${rm_list}
  #printf "DBG: remove_deb_pkgs() Final remove list:\n  ${rm_list}\n"

  if [[ "${rm_list}" = "" ]]
  then
    return 0
  fi

  # Remove package from 'precise' distribution.
  if [[ ${verbose} ]]
  then
    printf "\n${demark}\n"
    printf "Removing packages: ${rm_list}\n\n"
  fi

  prompt="Please enter passphrase:"

  reprepro --ask-passphrase -Vb . remove ${repo_codename} ${rm_list}

  return $?
}

#
# Synopsis:     include_deb_pkgs
# Description:  Include (import) Debian packages to repo.
# Input:        deb_file_list passphrase
#
include_deb_pkgs()
{
  for deb_file in ${deb_file_list}
  do
    printf "\n${demark}\n"
    printf "Updating package: ${deb_file##${incoming}/}\n\n"

    prompt="Enter passphrase: "

    # sign package
    dpkg-sig -k FFAF09AF --sign builder ${deb_file}

    prompt="Please enter passphrase:"

    # import package to repo
    reprepro --ask-passphrase -Vb . includedeb ${repo_codename} ${deb_file}

    # finally move the .deb file to a backup.
    mv  ${deb_file} incoming.bk/${repo_codename}/.
  done

  return 0
}

#
# Synopsis:     validate_update
# Description:  Validate update
# Input:        deb_pkg_list
#
validate_update()
{
  printf "\n${demark}\n"
  printf "Results:\n"
  for pkg_name in ${deb_pkg_list}
  do
    pkgtest=$(reprepro list ${repo_codename} ${pkg_name})
    if [[ "${pkgtest}" != "" ]]
    then
      printf "${pkg_name}: UPDATED: ${pkgtest}\n"
    else
      printf "${pkg_name}: FAILED TO UPDATE\n"
    fi
  done
}

#
# Synopsis:     update_deb_pkgs
# Description:  Updates all found Debian package .deb files for repo.
# Input:        deb_file_list deb_pkg_arch
# Output:       deb_pkg_list
#
update_deb_pkgs()
{
  deb_pkg_list=

  # RDK future work
  #getpassphrase

  for deb_file in ${deb_file_list}
  do
    #printf "DBG: update_deb_pkgs() deb_pkg_name=${deb_file}\n"
    get_pkg_info ${deb_file}
    if [[ "${deb_pkg_arch}" != "${repo_arch}" ]]
    then
      printf "${_Cmd}: Error: Mismatch of architectures.\n" 
      printf "  Repo:                     ${repo}\n" 
      printf "  Repo Architecure:         ${repo_arch}\n" 
      printf "  Repo Codename:            ${repo_codename}\n" 
      printf "  Debian .deb File:         ${deb_pkg_file}\n" 
      printf "  Debian .deb Architecture: ${deb_pkg_arch}\n" 
      printf "Fix/move/delete from incoming prior to running command again.\n"
      exit 4
    else
      deb_pkg_list="${deb_pkg_list} ${deb_pkg_name}"
    fi
  done

  if remove_deb_pkgs
  then
    include_deb_pkgs
  fi

  validate_update

  return $?
}

# -------------------------------------------------------------------------
# Execute
# -------------------------------------------------------------------------

# enter repo's top directory
cd ${fqrepo}

# make list of Debian package files.
make_deb_list

# no files check
if [[ ${file_cnt} = 0 ]]
then
  printf "${_Cmd}: Error: No Debian package files found.\n"
  exit 4
fi

# print state
if [[ ${noexec} || ${verbose} ]]
then
  printf "Repo:                 ${repo}\n"
  printf "Repo Root:            ${fqrepo}\n"
  printf "Debian Architecture:  ${repo_arch}\n"
  printf "Debian Codename:      ${repo_codename}\n"
  printf "Update Package Count: ${file_cnt}\n"
  printf "Debian Files:\n"
  for deb_file in ${deb_file_list}
  do
    printf "  ${deb_file##${distro}/}\n"
  done
fi

# update
if [[ ${noexec} ]]
then
  exit 0
else
  update_deb_pkgs
  exit $?
fi
