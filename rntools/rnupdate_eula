#!/usr/bin/python
#
# File:
#   rnupdate_eula
#
# Usage:
#   rnupdate_eula [OPTION]... LICENSE [DIR | FILE]
#   rnupdate_eula --help
#
# Description:
#   Update package source file EULA's.
#
# Author:
#   Robin D. Knight (robin.knight@roadnarrows.com)
#
# Copyright:
#   (C) 2013-2018. RoadNarrows LLC.
#   http://www.roadnarrows.com
#   All Rights Reserved
#
# License:
#   MIT
#

import os
import sys
import shutil
import fnmatch
import re
import getopt

# command name
argv0 = os.path.basename(__file__)

RNMakeEnv = { }

def initRNMakeEnv():
  global RNMakeEnv
  RNMakeEnv['rnmake'] = os.getenv('RNMAKE_ROOT', 'UNDEF')
  RNMakeEnv['arch'] = os.getenv('RNMAKE_ARCH_DFT', 'x86_64')
  RNMakeEnv['xprefix'] = os.getenv('RNMAKE_INSTALL_XPREFIX')
  RNMakeEnv['prefix'] = os.getenv('RNMAKE_INSTALL_PREFIX')
  import __main__ as main
  RNMakeEnv['cmdreal'] = os.path.realpath(main.__file__)

# Eula Tags
EulaTagBegin    = "EulaBegin"
EulaTagEnd      = "EulaEnd"
reEulaTagBegin  = r"\\EulaBegin|@EulaBegin@|@EulaBegin"
reEulaTagEnd    = r"\\EulaEnd|@EulaEnd@|@EulaEnd"

## Excluded directories
Pat_excludes  = [
    '.git', '.svn', 'obj', '.deps', 'dist', 'loc', 'hw', 'gtest', 'tinyxml',
    'build', 'build.*', 'doxy', 'deb-doc', 'deb-dev', 'deb-src'
]

## Source file patterns
Pat_c_src     = ['*.[cCh]', '*.cxx', '*.cpp', '*.[ch][ch]', '*.hpp']
Pat_mk_src    = ['Makefile', 'makefile', '*.mk']
Pat_py_src    = ['*.py']
Pat_j_src     = ['*.java']
Pat_xml_src   = ['*.htm', '*.html', '*.xml']
Pat_doxy_src  = ['*.doxy']
Pat_js_src    = ['*.js']
Pat_src       = Pat_c_src + Pat_mk_src + Pat_py_src + Pat_j_src + \
                Pat_xml_src + Pat_doxy_src + Pat_js_src

## Doxygen file comment style patterns
Pat_slashstar_style = Pat_c_src + Pat_j_src + Pat_doxy_src + Pat_js_src
Pat_hash_style      = Pat_py_src
Pat_hashhash_style  = []
Pat_hashbang_style  = []
Pat_xml_style       = Pat_xml_src
Pat_sol_style       = Pat_mk_src
Pat_nocom_style     = []

## Slash-star (c, java, doxygen, php, ...) comment style constructs
ComSlashStarKey     = "/* */"
ComSlashStarStart   = "/*!"
ComSlashStarMiddle  = " * "
ComSlashStarEnd     = " */"

## Hash (makefiles, python, perl, ...) comment style constructs
ComHashKey          = "#"
ComHashStart        = "##"
ComHashMiddle       = "# "
ComHashEnd          = "#"

## Hash-hash doxygen comment style constructs
ComHashHashKey      = "##"
ComHashHashStart    = "##"
ComHashHashMiddle   = "## "
ComHashHashEnd      = "##"

## Hash-bang doxygen filtered pattern comment style constructs
ComHashBangKey      = "##!"
ComHashBangStart    = "##!"
ComHashBangMiddle   = "##! "
ComHashBangEnd      = "##!"

## XML (html, xml, ...) comment style constructs
ComXmlKey           = "<!-- -->"
ComXmlStart         = "<!--"
ComXmlMiddle        = " - "
ComXmlEnd           = " -->"

## Start-Of-Line "comment" style constructs
ComSolKey          = "^"
ComSolStart        = ""
ComSolMiddle       = ""
ComSolEnd          = ""

## No comment doxygen comment style constructs
NoComKey        = "nocomment"
NoCom           = ""

## Doxygen Supported Comments 
CommentStyle = {
    ComSlashStarKey: {
      'start':  ComSlashStarStart,
      'middle': ComSlashStarMiddle,
      'end':    ComSlashStarEnd
    },
    ComHashKey: {
      'start':  ComHashStart,
      'middle': ComHashMiddle,
      'end':    ComHashEnd
    },
    ComHashHashKey: {
      'start':  ComHashHashStart,
      'middle': ComHashHashMiddle,
      'end':    ComHashHashEnd
    },
    ComHashBangKey: {
      'start':  ComHashBangStart,
      'middle': ComHashBangMiddle,
      'end':    ComHashBangEnd
    },
    ComXmlKey: {
      'start':  ComXmlStart,
      'middle': ComXmlMiddle,
      'end':    ComXmlEnd
    },
    ComSolKey: {
      'start':  ComSolStart,
      'middle': ComSolMiddle,
      'end':    ComSolEnd
    },
    NoComKey: {
      'start':  NoCom,
      'middle': NoCom,
      'end':    NoCom
    }
}

# ansi colors
color_pre         = "\033["
color_post        = "\033[0m"
color_red         = "0;31m"
color_bold_red    = "1;31m"
color_green       = "0;32m"
color_yellow      = "0;33m"
color_gray        = "1;30m"

# colors used
color_info    = color_pre + color_green
color_warn    = color_pre + color_yellow
color_error   = color_pre + color_red
color_fatal   = color_pre + color_bold_red
color_banner  = color_pre + color_green
color_end     = color_post

# disable color output
def turnOffColor():
  global color_info, color_warn, color_error, color_fatal, color_banner
  global color_end
  color_info    = ''
  color_warn    = ''
  color_error   = ''
  color_fatal   = ''
  color_banner  = ''
  color_end     = ''

# showInfo msg [msg...]
def showInfo(*msgs):
  print color_info,
  for msg in msgs:
    print msg,
  print color_end

# showWarning wmsg [wmsg...]
def showWarning(*wmsgs):
  print "{0}: {1}Warning:".format(argv0, color_warn),
  for msg in wmsgs:
    print msg,
  print color_end

# showError emsg [emsg...]
def showError(*emsgs):
  print "{0}: {1}Error:".format(argv0, color_error),
  for msg in emsgs:
    print msg,
  print color_end

# fatal exitcode emsg [emsg...]
def fatal(ec, *emsgs):
  print "{0}: {1}Fatal:".format(argv0, color_fatal),
  for msg in emsgs:
    print msg,
  print color_end
  sys.exit(ec)

bold_line='::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::' 

# showBanner eula isdir name doupdate forceit
def showBanner(eula, isdir, name, doupdate, forceit):
  print "\n{0}{1}".format(color_banner, bold_line)
  print ":: {0:<15s} {1}".format("EULA:", eula)
  if isdir:
    print ":: {0:<15s} {1}".format("Directory:", name)
  else:
    print ":: {0:<15s} {1}".format("File:", name)
  print ":: {0:<15s} {1}".format("Update File(s):", doupdate)
  print ":: {0:<15s} {1}".format("Force Update:", forceit)
  print "{0}{1}\n".format(bold_line, color_end)


# showDirBanner dir
def showDirBanner(dir):
  print "\n{0}{1}".format(color_banner, bold_line)
  print ":: {0}".format(dir)
  print "{0}{1}\n".format(bold_line, color_end)

## \brief Command-line exception class.
#
# Raise usage excpetion.
#
class usage(Exception):

  ## \brief Constructor.
  #
  # \param msg   Error message string.
  #
  def __init__(self, msg):
    ## error message attribute
    self.msg = msg


## \brief Applicationclass.
#
class Application():

  ## \brief Constructor.
  #
  def __init__(self):
    ## command pathname
    self.m_cmdname = __file__

    ## EULA license tag
    self.m_EulaLicenseTag = None

    ## EULA plain text filename
    self.m_EulaPlainTextFile = None

    ## Dictionary of EULAs
    self.m_EulaTag = { }
    self.m_Eula    = { }

    ## Number of files (required to be) updated.
    self.m_nUpdateCnt = 0

  ## \brief Print usage error.
  #
  # \param emsg  Error message string.
  #
  def printUsageErr(self, emsg):
    showError(emsg)
    fatal(2, "Try '{0} --help' for more information.".format(argv0))

  ## \brief Print command-line help.
  #
  def callHelp(self):
    tags = reEulaTagBegin.split('|')
    eulaBeg = ''
    for t in tags:
      eulaBeg = eulaBeg + ' ' + "{0:<15s}".format(t.replace('\\\\', '\\'))
    tags = reEulaTagEnd.split('|')
    eulaEnd = ''
    for t in tags:
      eulaEnd = eulaEnd + ' ' + "{0:<15s}".format(t.replace('\\\\', '\\'))

    print """\
Usage: {0} [OPTIONS] LICENSE [DIR | FILE]
       {0} --help

Update source file EULAs with the specified LICENSE.

Options and arguments:
  -l, --list              : List available EULAs and exit.
      --no-color          : Disable color output.
  -n, --no-update         : List files that need updating, but don't update.
  -f, --force             : Force update, even if EULAs match. Must be good.
  -e, --exclude=EXDIR     : Exclude directory. May be iterated.
  -t, --templates=ETDIR   : EULA templates directory. Overrides default search
                            directories.

  -h, --help              : Display this help and exit.

Description:
  If a directory DIR is specified, then recursively update all source files
  with the EULA specified by the LICENSE tag, starting from directory DIR.
  Only files that differ in EULA will be updated, unless the --force
  option is specified. Source files are defined as:
    C, C++, Java, Python, make files, doxygen, html, xml

  If a regular FILE is specified, then update the file's EULA with the
  specified LICENSE.

  If neither DIR nor FILE is specified, the current working directory ('.') is
  used.

  EULAs are plain text and/or doxygen markup files of with naming format:
    eula_LICENSE.txt

  The contents of the files are inserted, verbatim, between the EULA tags within
  the source files. Valid tag pairs:
  {1}
  {2}

""".format(argv0, eulaBeg, eulaEnd)
 
  ## \brief Print list of availabe license keys.
  #
  def printLicenseKeys(self, templates):
    eulaRoot = self.findEulaTemplates(templates)
    showDirBanner(eulaRoot)

    print "{0:<20s} {1:s}".format("license", "file")
    print "{0:<20s} {1:s}".format("-------", "----")

    for root, dirlist, filelist in os.walk(eulaRoot):
      for fname in filelist:
        if fnmatch.fnmatch(fname, 'eula_*.txt'):
          license = fname[5:-4]
          print "{0:<20s} {1:s}".format(license, fname)

  ## \brief Print file i/o warning message.
  #
  # \param f        Opened file object or file name.
  # \param warnmsgs Warning message(s).
  #
  def iowarning(self, f, *warnmsgs):
    if type(f) is file:
      showWarning("{0}:".format(f.name), *warnmsgs)
    else:
      showWarning("{0}:".format(f), *warnmsgs)

  ## \brief Print file i/o error message.
  #
  # \param f        Opened file object or file name.
  # \param errmsg   Error message(s).
  #
  def ioerror(self, f, *errmsgs):
    if type(f) is file:
      showError("{0}:".format(f.name), *errmsgs)
    else:
      showError("{0}:".format(f), *errmsgs)

  ## \brief Get command-line options
  #  
  # \param argv          Argument list. If not None, then overrides
  #                      command-line arguments.
  # \param [out] kwargs  Keyword argument list.  
  #
  def getOptions(self, argv=None, **kwargs):
    if argv is None:
      argv = sys.argv

    self.m_cmdname = kwargs.get('argv0', __file__)

    # defaults
    kwargs['debug']     = 0
    kwargs['color']     = True
    kwargs['update']    = True
    kwargs['force']     = False
    kwargs['license']   = ''
    kwargs['templates'] = ''
    kwargs['topdir']    = '.'
    kwargs['file']      = None
    kwargs['list']      = False

    # parse command-line options
    try:
      try:
        opts, args = getopt.getopt(argv[1:], "nfe:lt:",
            ['help', 'list', 'no-color', 'no-update', 'force', 'exclude=',
             'templates=', ''])
      except getopt.error, msg:
        raise usage(msg)
      for opt, optarg in opts:
        if opt in ('--no-color',):
          kwargs['color'] = False
          turnOffColor()
        elif opt in ('-n', '--no-update',):
          kwargs['update'] = False
        elif opt in ('-f', '--force',):
          kwargs['force'] = True
        elif opt in ('-t', '--templates',):
          kwargs['templates'] = optarg
        elif opt in ('-e', '--exlude',):
          Pat_excludes.append(optarg)
        elif opt in ('-l', '--list',):
          kwargs['list'] = True
        elif opt in ('--help',):
          self.callHelp()
          sys.exit(0)
    except usage, err:
      self.printUsageErr(err.msg)
      sys.exit(2)

    # list after options precessing
    if kwargs['list']:
      self.printLicenseKeys(kwargs['templates'])
      sys.exit(0)

    if len(args) < 1:
      self.printUsageErr("No EULA license specified.")
      sys.exit(2)
    else:
      kwargs['license'] = args[0]

    if len(args) > 1:
      if os.path.isdir(args[1]):
        kwargs['topdir'] = args[1]
      else:
        kwargs['file'] = args[1]

    return kwargs

  ## \brief Classify comment style from file name.
  #
  # \param fname   File name.
  #
  # \return Comment style.
  #
  def classifyFileType(self, fname):
    for pat in Pat_slashstar_style:
      if fnmatch.fnmatch(fname, pat):
        return ComSlashStarKey
    for pat in Pat_hash_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashKey
    for pat in Pat_hashhash_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashHashKey
    for pat in Pat_hashbang_style:
      if fnmatch.fnmatch(fname, pat):
        return ComHashBangKey
    for pat in Pat_xml_style:
      if fnmatch.fnmatch(fname, pat):
        return ComXmlKey
    for pat in Pat_nocom_style:
      if fnmatch.fnmatch(fname, pat):
        return NoComKey
    return None  

  ## \brief Add EULA of the given comment style to the dictionary of EULAs
  #
  # \param style    Comment style.
  #
  def addEulaStyle(self, style):
    comment = CommentStyle[style]
    self.m_Eula[style] = []
    for line in self.m_Eula['plaintext']:
      self.m_Eula[style].append(comment['middle']+line)
    self.m_EulaTag[style] = { }
    self.m_EulaTag[style]['begin'] = comment['middle']+"\\"+EulaTagBegin+"\n"
    self.m_EulaTag[style]['end']   = comment['middle']+"\\"+EulaTagEnd+"\n"
  
  ## \brief Find EULA block in open source file.
  #
  # \param f  Open source file object.
  #
  # \return
  # Returns a 4-tuple (found, nELineBegin, nELineEnd, eula) where:\n
  # value | description
  # ----- | -----------
  # found       | True or False if EULA block is found.
  # nELineBegin | The line number of the beginning of EULA block.
  # nELineEnd   | The line number of the end of EULA block.
  # eula        | The text holding the current file EULA found between the
  #               lines numbers.
  #
  def findEula(self, f):
    nELineBegin = -1      # begin tag line number
    nELineEnd   = -1      # end tag line number
    eula        = []      # eula block

    fail = (False, -1, -1, [])

    n = 0       # working line number

    for line in f:
      n += 1

      # begin tag
      if re.search(reEulaTagBegin, line):
        nELineBegin = n
      # end tag
      elif re.search(reEulaTagEnd, line):
        nELineEnd = n
        break
      # in eula block
      elif nELineBegin > 0:
        # eula too long
        if n-nELineBegin > 100:
          self.iowarning(f, "EULA block starting at line {0} is too long or " \
              "the '{1}' tag missing.", nELineBegin, EulaTagEnd)
          return fail
        # add line to eula block
        else:
          eula.append(line)

    #
    # final checks
    #

    # no eula in file
    if nELineEnd < 0 and nELineBegin < 0:
      self.iowarning(f, "No EULA found.", EulaTagBegin)
      return fail
    # no eula begin pattern
    elif nELineBegin < 0:
      self.iowarning(f, "'%{0} tag is missing or non-standard.", EulaTagBegin)
      return fail
    # no eula end pattern
    elif nELineEnd < 0:
      self.iowarning(f, "'%{0} tag is missing or non-standard.", EulaTagEnd)
      return fail
    # begin pattern found but end position preceeds it
    elif nELineEnd <= nELineBegin:
      self.iowarning(f,
          "EULA begin pattern at {0} follows end pattern at {1}.",
           nELineBegin, nELineEnd)
      return fail
    # got a good eula block
    else:
      return True, nELineBegin, nELineEnd, eula
  
  ## \brief Compare source file EULA block to tarage EULA license.
  #
  # \param eula   Source file EULA.
  # \param style  Target EULA with added comment style.
  #
  # \return Returns True if EULAs are identical, False otherwise.
  #
  def isEqualEulas(self, eula, style):
    if len(eula) != len(self.m_Eula[style]):
      return False
    i = 0
    while i < len(eula): 
      if eula[i] != self.m_Eula[style][i]:
        return False
      i += 1
    return True
  
  ## \brief Copy source file to temporary while updating the EULA.
  #
  # \param fsrc         Open source file object.
  # \param style        EULA comment style.
  # \param nLineBegin   EULA begin tag line number.
  # \param nLineEnd     EULA end tag line number.
  #
  # \return On success, returns temporary file name.
  #         On failure, an empty string is returned.
  #
  def copySourceToTmp(self, fsrc, style, nLineBegin, nLineEnd):
    tmpfile = fsrc.name + '.tmp'
    try:
      fdst = open(tmpfile, "w")
    except:
      self.iowarning(fdst, "Cannot open temporary before updating.")
      return ""
    fsrc.seek(0)
    n = 1
    # lines before eula
    while n < nLineBegin:
      fdst.write(fsrc.readline())
      n += 1
    # new eula
    fdst.write(self.m_EulaTag[style]['begin'])
    for line in self.m_Eula[style]:
      fdst.write(line)
    fdst.write(self.m_EulaTag[style]['end'])
    # eat old eula
    while n <= nLineEnd:
      fsrc.readline()
      n += 1
    # lines after eula
    for line in fsrc:
      fdst.write(line)
    fdst.close()
    return tmpfile
  
  ## \brief Check and, if needed, update source file EULA.
  #
  # \param f          Open source file object.
  # \param style      Comment style.
  # \param doupdate   Do [not] update.
  # \param doforce    Do [not] force update on good files.
  #
  def updateEula(self, f, style, doupdate, doforce):
    found, nLineBegin, nLineEnd, eula = self.findEula(f)
    #print "(%s, %d, %d) %s" % (style, nLineBegin, nLineEnd, f.name)
    if not found:
      return

    # one-time add of an eula with the given doxygen comment style
    if not self.m_Eula.has_key(style):
      self.addEulaStyle(style)
      #for line in self.m_Eula[style]:
      #  print "%s" % (line),

    # check if eulas are equal
    if self.isEqualEulas(eula, style) and not doforce:
      return

    if doupdate:
      tmpfile = self.copySourceToTmp(f, style, nLineBegin, nLineEnd)
      f.close()
      if not tmpfile:
        return
      try:
        shutil.move(tmpfile, f.name)
      except IOError:
        self.ioerror(f, "Cannot move temporary {0} back to source.", tmpfile)
        return
      print "Updated: {0}".format(f.name)
      self.m_nUpdateCnt += 1
    else:
      print "Update required: {0}".format(f.name)
      self.m_nUpdateCnt += 1
  
  ##
  # \brief Run application on file.
  #    
  # \param kwargs  Optional keyword argument list.
  #
  def runOnFile(self, **kwargs):
    showBanner(self.m_EulaLicenseTag, False, kwargs['file'],
        kwargs['update'], kwargs['force']) 

    showInfo("Scanning...")

    self.m_nUpdateCnt = 0

    fname = kwargs['file']
    if not os.path.isfile(fname):
      self.ioerror(fname, "Does not exist.")
      return
    style = self.classifyFileType(fname)
    if style:
      try:
        f = open(fname, "r")
      except:
        self.ioerror(fname, "Cannot open.")
        return
      self.updateEula(f, style, kwargs['update'], kwargs['force'])
      if not f.closed:
        f.close()

  ## \brief Run application recursively on directory.
  #    
  # \param kwargs  Optional keyword argument list.
  #
  def runOnDirectory(self, **kwargs):
    showBanner(self.m_EulaLicenseTag, True, kwargs['topdir'],
        kwargs['update'], kwargs['force']) 

    showInfo("Scanning...")

    self.m_nUpdateCnt = 0

    for root, dirlist, filelist in os.walk(kwargs['topdir']):
      #print "------------------------"
      #print "root: ", root
      for pat in Pat_excludes:
        for dirname in dirlist:
          if fnmatch.fnmatch(dirname, pat):
            dirlist.remove(dirname)
            break

      #print "dirlist: ", dirlist
      for fname in filelist:
        style = self.classifyFileType(fname)
        if style:
          fpath = root + os.path.sep + fname
          try:
            f = open(fpath, "r")
          except:
            print "Warning: {0}: Cannot open.".format(fpath)
            continue
          self.updateEula(f, style, kwargs['update'], kwargs['force'])
          if not f.closed:
            f.close()

  ## \brief Find EULA templates directory.
  #
  # \param templates  Optional templates directory which overrides default 
  #                   search directories.
  #
  # \return EULA templates directory on success, fatal otherwise.
  #
  def findEulaTemplates(self, templates=''):
    if templates:
      if os.path.isdir(templates):
        return templates
      else:
        fatal(8, "{0}: Not a directory".format(templates))
    euladir = 'share/rntools/templates/eula'
    prefix = ''
    if RNMakeEnv['prefix']:
      prefix = RNMakeEnv['prefix']
    elif RNMakeEnv['xprefix']:
      prefix = RNMakeEnv['xprefix']+'/'+RNMakeEnv['arch']
    else:
      prefix = '/usr/local'
    searchPath = [
        prefix+'/'+euladir,
        os.path.dirname(RNMakeEnv['cmdreal'])+'/'+euladir
    ]
    for d in searchPath:
      if os.path.isdir(d):
        return d
    fatal(8, "Cannot find EULA templates in: {0}".format(searchPath))

  ## \brief Load EULA plaintext file.
  #
  # \param licence  License tag.
  #
  def loadEula(self, license):
    self.m_EulaLicenseTag    = license
    self.m_EulaPlainTextFile =  self.m_EulaTemplatesRoot + os.path.sep + \
                                'eula_' + self.m_EulaLicenseTag + '.txt'

    try:
      f = open(self.m_EulaPlainTextFile, "r")
    except:
      self.ioerror(self.m_EulaPlainTextFile,
          "Cannot open EULA plain text file.")
      sys.exit(2)

    self.m_Eula['plaintext'] = f.readlines()

    f.close()

  ## \brief Run application.
  #    
  # \param argv    Optional argument list to override command-line arguments.
  # \param kwargs  Optional keyword argument list.
  #
  def run(self, argv=None, **kwargs):
      
    kwargs = self.getOptions(argv, **kwargs)

    self.m_EulaTemplatesRoot = self.findEulaTemplates(kwargs['templates'])

    self.loadEula(kwargs['license'])

    if kwargs['file']:
      self.runOnFile(**kwargs)
    else:
      self.runOnDirectory(**kwargs)

    showInfo("Files: {0}".format(self.m_nUpdateCnt))

    return 0


    print "Directory:  %s" % (kwargs['topdir'])
    print "Scanning..."

    self.m_nUpdateCnt = 0

    for root, dirlist, filelist in os.walk(kwargs['topdir']):
      #print "DBG: ------------------------"
      #print "DBG: root: ", root
      for pat in Pat_excludes:
        for dirname in dirlist:
          if fnmatch.fnmatch(dirname, pat):
            dirlist.remove(dirname)
            break
      #print "DBG: dirlist: ", dirlist
      for fname in filelist:
        style = self.classifyFileType(fname)
        if style:
          fpath = root + os.path.sep + fname
          try:
            f = open(fpath, "r")
          except:
            print "Warning: %s: Cannot open." % (fpath)
            continue
          self.updateEula(f, style, kwargs['update'])
          if not f.closed:
            f.close()

    showInfo("Files: {0}".format(self.m_nUpdateCnt))

    return 0
  ##


#------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------

if __name__ == '__main__':
  initRNMakeEnv()

  #print 'DBG:', RNMakeEnv

  # create utility application
  app = Application()

  # run application
  sys.exit( app.run() )
