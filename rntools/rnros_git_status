#!/bin/bash
#
# File:
#   rnros_git_status
#
# Usage:
#   rnros_git_status [OPTION]... [RNMAKEVAR]... [PKG]...
#   rnros_git_status --help
#
# Description:
#   Determine the status all ROS git packages found under the user's workspace.
#

argv0=$(basename $0)

# callHelp
callHelp()
{
  cat <<EOH
Usage: ${argv0} [OPTION]...
       ${argv0} --help
Determine the status all ROS git packages found under the user's workspace.

Options:
  --no-color        Disable color output. Default: colors are enabled.
  --ros-distro      ROS distro (e.g. kinetic). Default: \${ROS_DISTRO}.
  --ros-ws          ROS workspace. Default: First user component found in
                    \${ROS_PACKAGE_PATH}.
  --stop-on-errors  Stop on make errors. Default: warn and continue.

  --help            Print this help and exit.

For each discovered ROS package, a 'git pull' is requested.
EOH
  exit 0;
}

# ansi colors
color_pre="\033["
color_post="\033[0m"
color_red="0;31m"
color_bold_red="1;31m"
color_bold_green="1;32m"
color_yellow="0;33m"
color_cyan="0;36m"

# colors used
color_warn="${color_pre}${color_yellow}"
color_error="${color_pre}${color_red}"
color_fatal="${color_pre}${color_bold_red}"
color_banner="${color_pre}${color_bold_green}"
color_end=${color_post}

# showWarning wmsg [wmsg...]
showWarning()
{
  printf "${argv0}: ${color_warn}${*}${color_end}\n" >&2
}

# showError emsg [emsg...]
showError()
{
  printf "${argv0}: ${color_error}${*}${color_end}\n" >&2
}

# fatal exitcode emsg
fatal()
{
  printf "${argv0}: ${color_fatal}${2}${color_end}\n" >&2
  exit ${1}
}

# long and short options
longopts="no-color,ros-distro:,ros-ws:,stop-on-errors:,help"
shortopts=""

# get the options
OPTS=$(getopt --name ${argv0} -o "${shortopts}" --long "${longopts}" -- "${@}")

if [ $? != 0 ]
then
  fatal 2 "Try '${argv0} --help' for more information."
fi

#echo "${OPTS}"
eval set -- "${OPTS}"

# command line option and argument variables
ros_distro="${ROS_DISTRO}"
ros_pkg_path="${ROS_PACKAGE_PATH}"
ros_ws=
stop_on_errors=false

# process command-line options
while true
do
  case "$1" in
    --no-color)
        rnmakevars="color=off"
        color_warn=
        color_error=
        color_fatal=
        color_banner=
        color_end=
        shift;;
    --ros-distro) ros_distro="$2"; shift 2;;
    --ros-ws) ros_ws="$2"; shift 2;;
    --stop-on-errors) stop_on_errors=true; shift;;
    --help) callHelp; shift;;

    --) shift; break;;
    *)  break;;
  esac
done

# print error
if [ -z "${ros_distro}" ]
then
  fatal 4 "No ROS distro specified."
fi

ros_root=/opt/ros/${ros_distro}

findWs()
{
  echo "${ros_pkg_path}" | \
  tr ':' '\n' | \
  while read ws
  do
    t=${ws##${ros_root}}
    if [[ ${ws} = ${t} ]]
    then
      echo ${ws}
      return
    fi
  done
  echo ""
}

if [ -z "${ros_ws}" ]
then
  ros_ws=$(findWs)
fi

if [ ! -d "${ros_ws}" ]
then
  fatal 4 "${rosws}: ROS workspace does not exist."
fi

#echo $ros_distro
#echo $ros_root
#echo $ros_ws

bold_line='::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::' 
norm_line='~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~  ~'

# showBanner distro ws
showBanner()
{
	printf "\n${color_banner}${bold_line}\n"
  printf ":: ROS distro:    ${1}\n"
  printf ":: ROS workspace: ${2}\n"
	printf "${bold_line}${color_end}\n"
}

# showTblBanner
showTblHdr()
{
	printf "${color_banner}"
  printf "%25s\n" ${1}
  printf "%-30s%-5s%-s\n" "package" "M" "version"
  printf "%-30s%-5s%-s\n" "-------" "-" "-------"
	printf "${color_end}"
}

showBanner ${ros_distro} ${ros_ws}
showTblHdr

for pkg in ${ros_ws}/*
do
  if [ ! -d ${pkg} ]
  then
    continue
  fi

  cd ${pkg}

  pkg_base=$(basename ${pkg})

  printf "%-30s" ${pkg_base}

  f=$(git status -s -uno 2>/dev/null)

  if [ -z "${f}" ]
  then
    printf "%-5s" " "
  else
    printf "%-5s" "M"
  fi

  if [ -f "${pkg_base}/package.xml" ]
  then
    version=$(xmllint --xpath "/package/version/text()" ${pkg_base}/package.xml)
  elif [ -f "./package.xml" ]
  then
    version=$(xmllint --xpath "/package/version/text()" ./package.xml)
  else
    version=""
  fi
  printf "%-s " ${version}
  printf "\n"
done
