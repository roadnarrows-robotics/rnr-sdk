#!/bin/bash
#
# File:
#   cppstring
#
# Usage:
#   cppstring [OPTION]... [FILE]
#   cppstring --help
#
# Description:
#   Print out the C Preprocessor built-in predefined macros, strings, versions,
#   and include paths.
#

argv0=$(basename $0)

# callHelp
callHelp()
{
  cat <<EOH
Usage: ${argv0} [OPTION]... [FILE]
       ${argv0} --help
Print C Preprocessor built-in predefined macros and strings.

FILE Options:
  -Dmacro[=defn]... 
  -Idir...
  -Umacro... 

Options:
  --cpp             C Preprocessor command. Default: cpp.
  --no-color        Disable color output. Default: colors are enabled.

  --help            Print this help and exit.

Print out the C Preprocessor built-in predefined macros, strings, versions,
and include paths.

If FILE is specified, then cpp processes that file. Otherwise the empty file
(/dev/null) is processed to print only the built-in envirionment. If FILE is
specified, then most likely one or more FILE Options will be required.
EOH
  exit 0;
}

# ansi colors
color_pre="\033["
color_post="\033[0m"
color_red="0;31m"
color_yellow="0;33m"
color_cyan="0;36m"

# colors used
color_warn="${color_pre}${color_yellow}"
color_error="${color_pre}${color_red}"
color_banner="${color_pre}${color_cyan}"
color_end=${color_post}

# showWarning wmsg [wmsg...]
showWarning()
{
  printf "${argv0}: ${color_warn}${*}${color_end}\n" >&2
}

# showError emsg [emsg...]
showError()
{
  printf "${argv0}: ${color_error}${*}${color_end}\n" >&2
}

# fatal exitcode emsg
fatal()
{
  printf "${argv0}: ${2}\n" >&2
  exit ${1}
}

# long and short options
longopts="cpp:,no-color,help"
shortopts="D:I:U:"

# get the options
OPTS=$(getopt --name ${argv0} -o "${shortopts}" --long "${longopts}" -- "${@}")

if [ $? != 0 ]
then
  fatal 2 "Try '${argv0} --help' for more information."
fi

#echo "${OPTS}"
eval set -- "${OPTS}"

# command line option and argument variables
cpp=cpp
cppopts=
srcdft=/dev/null

# process command-line options
while true
do
  case "$1" in
    -D|-I|-U) cppopts="${cppopts} ${1}${2}"; shift 2;;
    --cpp) cpp=${2}; shift 2;;
    --no-color)
        color_warn=
        color_error=
        color_banner=
        color_end=
        shift;;
    --help) callHelp; shift;;

    --) shift; break;;
    *)  break;;
  esac
done

# process command-line arguments
src=${1:-${srcdft}}

_x=$(which ${cpp})

if [ -z "${_x}" ]
then
  fatal 4 "'${cpp}' command not found."
fi

cpp=${_x}

# check cpp
if [ ! -x "${cpp}" ]
then
  fatal 8 "'${cpp}' command is not an executable."
fi

bold_line='::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::-::' 

# showBanner msg0 msg1
showBanner()
{
	printf "\n\n\n${color_banner}${bold_line}\n"
  printf ":: ${1}\n"
  printf ":: ${2}\n"
	printf "${bold_line}${color_end}\n\n"
}

cppopts_predef="-dM -E"
showBanner "Predefined Macros" "${cpp} ${cppopts_predef} ${cppopts} <${src}"
${cpp} ${cppopts_predef} ${cppopts} - <${src}

cppopts_ver="-v"
showBanner "Versions and Include Paths" \
          "${cpp} ${cppopts_ver} ${cppopts} <${src}"
${cpp} ${cppopts_ver} ${cppopts} - <${src}
