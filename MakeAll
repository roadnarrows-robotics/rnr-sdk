#!/bin/bash
#
# File:
#   MakeAll
#
# Usage:
#   MakeAll [OPTION]... [RNMAKEVAR]... [TARGET]... 
#   MakeAll --help
#
# Description:
#   Make target(s) for all RoadNarrows Robotics Software Development Kits.

argv0=$(basename $0)

# callHelp
callHelp()
{
  cat <<EOH
Usage: ${argv0} [OPTION]... [RNMAKEVAR]... [TARGET]...
       ${argv0} --help

Make TARGETs, depth first, of all kits.

Options:
  --no-color        Disable color output. Default: colors are enabled.
  --ignore-errors   Do not stop on make errors. Default: stop execution.

  --help            Print this help and exit.

Make all RNR SDKs for given TARGETs.

Arguments:
  TARGET        Any supported rnmake target. Common targets are:
                  deps all install clobber clean
  RNMAKEVAR     GNU make macro of form name=value.

Any command-line argument of the form name=value is considered an RNMAKEVAR 
argument. All RNMAKEVAR arguments are passed to the make commands.

Environment (see env.sh):
  RNR_WORKSPACE         The rnr-sdk root directory. Unset default: pwd
  RNR_ARCH_DFT          Default architecture. Unset default: x86_64
  RNR_ARCH              Target architecture. Unset default: RNR_ARCH_DFT
  RNR_INSTALL_XPREFIX   Install prefix. Unset default: ${HOME}/xinstall
  RNR_PYTHON            Python interpreter. Unset default: /usr/bin/python3
  RNR_PYTHON_VERSION    $(RNR_PYTHON) version x.y
EOH
  exit 0;
}

# ansi colors
color_pre="\033["
color_post="\033[0m"
color_red="0;31m"
color_bold_red="1;31m"
color_green="0;32m"
color_yellow="0;33m"
color_gray="1;30m"
color_brown="1;33m"

# colors used
color_info="${color_pre}${color_green}"
color_warn="${color_pre}${color_yellow}"
color_error="${color_pre}${color_red}"
color_fatal="${color_pre}${color_bold_red}"
color_banner="${color_pre}${color_brown}"
color_end=${color_post}

# turnOffColor
turnOffColor()
{
  color_info=
  color_warn=
  color_error=
  color_fatal=
  color_banner=
  color_end=
}

# showInfo msg [msg...]
showInfo()
{
  printf "${color_info}${*}${color_end}\n"
}

# showWarning wmsg [wmsg...]
showWarning()
{
  printf "${argv0}: ${color_warn}${*}${color_end}\n" >&2
}

# showError emsg [emsg...]
showError()
{
  printf "${argv0}: ${color_error}${*}${color_end}\n" >&2
}


line="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

showBanner()
{
  printf "${color_banner}"
  printf "%s\n" "${line}"
  printf " %s\n" "${1}"
  printf "%s\n" "${line}"
  printf "${color_end}\n"
}

# fatal exitcode emsg
fatal()
{
  printf "${argv0}: ${color_fatal}${2}${color_end}\n" >&2
  exit ${1}
}

# long and short options
longopts="no-color,ignore-errors,help"
shortopts=""

# get the options
OPTS=$(getopt --name ${argv0} -o "${shortopts}" --long "${longopts}" -- "${@}")

if [ $? != 0 ]
then
  fatal 2 "Try '${argv0} --help' for more information."
fi

#echo "${OPTS}"
eval set -- "${OPTS}"

# command line option and argument variables
rnrsdk=$(pwd)
stop_on_errors=true
rnmakevars=
arch=
tgtlist=

# process command-line options
while true
do
  case "$1" in
    --no-color)
        turnOffColor
        rnmakevars="color=off"
        shift;;
    --ignore-errors) stop_on_errors=false; shift;;
    --help) callHelp; shift;;
    --) shift; break;;
    *)  break;;
  esac
done

# process command-line arguments
for arg in "${@}"
do
  # name=value
  n="${arg%=*}"
  if [ "${n}" != "${arg}" ]
  then
    rnmakevars="${rnmakevars} ${arg}"
    if [ "${n}" = "arch" ]
    then
      arch="${arg#*=}"
    fi
  # target
  else
    tgtlist="${tgtlist} ${arg}"
  fi
done

# default target list if none specified
if [ -z "${tgtlist}" ]
then
  tgtlist="clobber deps all install"
fi

# source rnr sdk environment
source ${rnrsdk}/env.sh ${arch}

# old/original paths
opath=${PATH}
olibpath=${LD_LIBRARY_PATH}
opypath=${PYTHONPATH}

# pre-make fix up environment
prefix_env()
{
  _pkg=${1}
  _root=${RNR_WORKSPACE}/${_pkg}
  _dist=dist/dist.${RNR_ARCH}
  _pydist=${_dist}/lib/python${RNR_PYTHON_VERSION}/site-packages
  export PATH=${_root}/${_dist}/bin:${PATH}
  export LD_LIBRARY_PATH=${_root}/${_dist}/lib:${LD_LIBRARY_PATH}
  export PYTHONPATH=${_root}/${_pydist}:${PYTHONPATH}
  unset _pkg _root _dist _pydist
}

# makeIt vars tgt
makeIt()
{
  for tgt in ${@}
  do
    if ! make ${tgt}
    then
      if ${stop_on_errors}
      then
        showError "'make ${tgt}' failed."
        fatal 8 "make stopped."
      else
        showWarning "'make ${tgt}' failed - continuing."
      fi
    fi
  done
}

sudomsg=''

# post-make fix up environment
postfix_env()
{
  _pkg=${1}
  export PATH=${opath}
  export LD_LIBRARY_PATH=${olibpath}
  export PYTHONPATH=${opypath}
  unset _pkg
}

# make target(s) for all packages in list
for pkg in ${RNR_PKG_LIST}
do
  if [[ ! -d ${pkg} ]]
  then
    showWarning "'${pkg}' is not a directory - ignoring."
  elif [[ ! -f ${pkg}/Makefile ]]
  then
    showWarning "'${pkg}/Makefile' not found - ignoring."
  else
    showBanner ${pkg} ${tgtlist}
    cd ${pkg}
    prefix_env ${pkg}
    makeIt ${rnmakevars} ${tgtlist}
    postfix_env ${pkg}
    cd - >/dev/null
    echo
  fi
done
