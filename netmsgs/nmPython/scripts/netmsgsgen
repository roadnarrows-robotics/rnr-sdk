#!/usr/bin/env python

###############################################################################
#
# Package:  NetMsgs
#
# File:     netmsgsgen
#

## \file 
##
## $LastChangedDate: 2010-01-21 16:07:22 -0700 (Thu, 21 Jan 2010) $
## $Rev: 235 $
##
## \brief Python script to generates source files from a NetMsg XML
## specification.
##
## \par Usage:
## netmsgsgen [OPTIONS] --lang=c <em>xmlfile hfile cfile</em>
## netmsgsgen [OPTIONS] --lang=python <em>xmlfile pyfile</em>
## 
## netmsgsgen --version
## netmsgsgen --help
##
## \author Robin Knight (robin.knight@roadnarrows.com)
##  
## \par Copyright:
##   (C) 2009-2010.  RoadNarrows LLC.\n
##   (http://www.roadnarrows.com)\n
##   All Rights Reserved
##

#
###############################################################################

import sys
import getopt

import NetMsgs.NetMsgsBase as NMBase
import NetMsgs.NetMsgsXmlParser as NMXmlParser
import NetMsgs.NetMsgsGenC as NMGenC
import NetMsgs.NetMsgsGenPy as NMGenPy

## invoked command name
_Argv0    = __file__

## command name
_CmdName  = 'netmsgsgen'

## command version
_CmdVer   = '1.1.0'

#--
class Usage(Exception):
  """ Command-Line Options Usage Exception Class. """
  def __init__(self, msg):
    self.msg = msg
##

#--
def PrintUsageErr(emsg):
  """ Print Error Usage Message. """
  if emsg:
    print "%s: %s" % (_Argv0, emsg)
  else:
    print "%s: error" % (_Argv0)
  print "Try '%s --help' for more information." % (_Argv0)
##

#--
def PrintUsage():
  """ Print Command-Line Print Usage Message. """
  print """
usage: %s [OPTIONS] --lang=c --xml=<xmlfile> <hfile> <cfile>
       %s [OPTIONS] --lang=python --xml=<xmlfile> <pyfile>

       %s [OPTIONS] --version
       %s [OPTIONS] --help
"""  % (_Argv0, _Argv0, _Argv0, _Argv0)
  print """Options and arguments:
  -d, --debug=<level>       : Debug level. One of: 0 1 2
                              Default: 0  (off)
  -i, --incprefix=<path>    : Include prefix for #include in .c source file for
                              generated .h header file.
                              Default: '' (current directory)
  -l, --lang=<lang>         : Output language. One of: c python
                              Default: c
  -o, --overrides=<list>    : XML overrides. List in form of: name=value,...
                              Supported overrides:
                                encoding, endian, ns, brief

  -x, --xml=<xml>           : Input NetMsgs XML file path name.

  -v, --version             : Display version strings and exit.
  -h, --help                : Display this help and exit.
  """
##

#--
def GetOptions(argv=None, **kwargs):
  """ Get Main Options

      Parameters:
        argv    - Argument list. If not None, the overrides command-line
                  arguments.
        kwargs  - Keyword argument list.  

      Return:
        Command arguments dictionary.
  """
  global _Argv0, _CmdName, _CmdVer

  # command-line arguments
  if argv is None:
    argv = sys.argv

  _Argv0  = kwargs.get('argv0', __file__)
  cmdargs = {}

  # defaults
  cmdargs['debug']      = kwargs.get('debug', 0)
  cmdargs['incprefix']  = kwargs.get('incprefix', '')
  cmdargs['lang']       = kwargs.get('lang', 'c')
  cmdargs['xmlfile']    = kwargs.get('xmlfile', None)
  cmdargs['overrides']  = kwargs.get('overrides', {})

  # parse command-line options
  try:
    try:
      opts, args = getopt.getopt(argv[1:], "?hvd:i:l:o:x:",
          [ 'help', 'version', 'debug=', 'incprefix=', 'lang=', 
            'overrides=', 'xml=', ''])
    except getopt.error, msg:
      raise Usage(msg)
    for opt, optarg in opts:
      if opt in ('-h', '--help', '-?'):
        PrintUsage()
        sys.exit(0)
      elif opt in ('-v', '--version'):
        print "%s %s" %(_Argv0, _CmdVer)
        sys.exit(0)
      elif opt in ('-d', '--debug'):
        try:
          cmdargs['debug'] = int(optarg)
        except ValueError:
          raise Usage("%s %s: not an integer value." % (opt, optarg))
      elif opt in ('-i', '--incprefix'):
        cmdargs['incprefix'] = optarg
      elif opt in ('-l', '--lang'):
        if optarg not in ['c', 'python']:
          raise Usage("%s %s: not a supported generated language." % \
              (opt, optarg))
        cmdargs['lang'] = optarg
      elif opt in ('-x', '--xml'):
        cmdargs['xmlfile'] = optarg
      elif opt in ('-o', '--overrides'):
        overrides = optarg.split(',')
        for entry in overrides:
          try:
            name,value = entry.split('=')
            name = name.strip()
            value = value.strip()
            cmdargs['overrides'][name] = value
          except:
            raise Usage("%s %s: bad syntax" % (opt, repr(optarg)))
  except Usage, err:
    PrintUsageErr(err.msg)
    sys.exit(2)

  # validate and set command-line non-option arguments
  if not cmdargs['xmlfile']:
    PrintUsageErr("No input xml file specified.")
    sys.exit(2)

  if cmdargs['lang'] == 'c':
    if len(args) < 1:
      PrintUsageErr("No output C .h header file specified.")
      sys.exit(2)
    elif len(args) < 2:
      PrintUsageErr("No output C .c source file specified.")
      sys.exit(2)
    else:
      cmdargs['hfile'] = args[0]
      cmdargs['cfile'] = args[1]
  elif cmdargs['lang'] == 'python':
    if len(args) < 1:
      PrintUsageErr("No output Python .py file specified.")
      sys.exit(2)
    else:
      cmdargs['pyfile'] = args[0]

  return cmdargs
##

#--
def main(argv=None, **kwargs):
  """ Main.
        
      Parameters:
        argv    - Optional argument list to override command-line arguments.
        kwargs  - Optional keyword argument list.
  """
  global _Argv0, _CmdName, _CmdVer
  
  kwargs = GetOptions(argv, **kwargs)

  xml = NMXmlParser.NetMsgsXmlParser( filename=kwargs['xmlfile'],
                                      debug=kwargs['debug'],
                                      **kwargs['overrides'])

  try:
    xml.Parse()
  except NMXmlParser.NetMsgsXmlParserError as inst:
    print "Error: %s" % (inst)
    return 8

  if kwargs['lang'] == 'c':
    gen = NMGenC.NetMsgsGenC( xml, kwargs['hfile'], kwargs['cfile'],
                              debug=kwargs['debug'],
                              incprefix=kwargs['incprefix'] )
  elif kwargs['lang'] == 'python':
    gen = NMGenPy.NetMsgsGenPy( xml, kwargs['pyfile'], debug=kwargs['debug'] )

  try:
    gen.GenSource()
  except NMBase.NetMsgsError as inst:
    print "Error: %s" % (inst)
    return 8

  return 0
##

## Execute script.
if __name__ == '__main__':
  sys.exit( main(argv=None) )
